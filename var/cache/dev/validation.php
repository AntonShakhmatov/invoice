<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'Symfony.Component.Form.Form' => 0,
'IteratorAggregate' => 1,
'Symfony.Component.Form.FormInterface' => 2,
'Symfony.Component.Form.ClearableErrorsInterface' => 3,
'Traversable' => 4,
'Countable' => 5,
'ArrayAccess' => 6,
'App.Entity.InvoiceLines' => 7,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Form\\Extension\\Validator\\Constraints\\Form'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Form\\Extension\\Validator\\Constraints\\Form')),
        ],
        null,
        [
            'stdClass' => [
                'constraints' => [
                    [
                        $o[1],
                    ],
                ],
                'constraintsByGroup' => [
                    [
                        'Default' => [
                            $o[1],
                        ],
                        'Form' => [
                            $o[1],
                        ],
                    ],
                ],
                'traversalStrategy' => [
                    2,
                ],
                'name' => [
                    'Symfony\\Component\\Form\\Form',
                ],
                'defaultGroup' => [
                    'Form',
                ],
                'groups' => [
                    1 => [
                        'Default',
                        'Form',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'IteratorAggregate',
                ],
                'defaultGroup' => [
                    'IteratorAggregate',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Symfony\\Component\\Form\\FormInterface',
                ],
                'defaultGroup' => [
                    'FormInterface',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Symfony\\Component\\Form\\ClearableErrorsInterface',
                ],
                'defaultGroup' => [
                    'ClearableErrorsInterface',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Traversable',
                ],
                'defaultGroup' => [
                    'Traversable',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'Countable',
                ],
                'defaultGroup' => [
                    'Countable',
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (\Symfony\Component\VarExporter\Internal\Registry::$factories['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'ArrayAccess',
                ],
                'defaultGroup' => [
                    'ArrayAccess',
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
            ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
            $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
            clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'App\\Entity\\InvoiceLines',
                    'description',
                    3 => 'quantity',
                    5 => 'amount',
                    7 => 'vat_amount',
                    9 => 'total_with_vat',
                ],
                'defaultGroup' => [
                    'InvoiceLines',
                ],
                'members' => [
                    [
                        'description' => [
                            $o[1],
                        ],
                        'quantity' => [
                            $o[3],
                        ],
                        'amount' => [
                            $o[5],
                        ],
                        'vat_amount' => [
                            $o[7],
                        ],
                        'total_with_vat' => [
                            $o[9],
                        ],
                    ],
                ],
                'properties' => [
                    [
                        'description' => $o[1],
                        'quantity' => $o[3],
                        'amount' => $o[5],
                        'vat_amount' => $o[7],
                        'total_with_vat' => $o[9],
                    ],
                ],
                'constraints' => [
                    1 => [
                        $o[2],
                    ],
                    3 => [
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                ],
                'constraintsByGroup' => [
                    1 => [
                        'Default' => [
                            $o[2],
                        ],
                        'InvoiceLines' => [
                            $o[2],
                        ],
                    ],
                    3 => [
                        'Default' => [
                            $o[4],
                        ],
                        'InvoiceLines' => [
                            $o[4],
                        ],
                    ],
                    5 => [
                        'Default' => [
                            $o[6],
                        ],
                        'InvoiceLines' => [
                            $o[6],
                        ],
                    ],
                    7 => [
                        'Default' => [
                            $o[8],
                        ],
                        'InvoiceLines' => [
                            $o[8],
                        ],
                    ],
                    9 => [
                        'Default' => [
                            $o[10],
                        ],
                        'InvoiceLines' => [
                            $o[10],
                        ],
                    ],
                ],
                'class' => [
                    1 => 'App\\Entity\\InvoiceLines',
                    3 => 'App\\Entity\\InvoiceLines',
                    5 => 'App\\Entity\\InvoiceLines',
                    7 => 'App\\Entity\\InvoiceLines',
                    9 => 'App\\Entity\\InvoiceLines',
                ],
                'property' => [
                    1 => 'description',
                    3 => 'quantity',
                    5 => 'amount',
                    7 => 'vat_amount',
                    9 => 'total_with_vat',
                ],
                'groups' => [
                    2 => [
                        'Default',
                        'InvoiceLines',
                    ],
                    4 => [
                        'Default',
                        'InvoiceLines',
                    ],
                    6 => [
                        'Default',
                        'InvoiceLines',
                    ],
                    8 => [
                        'Default',
                        'InvoiceLines',
                    ],
                    10 => [
                        'Default',
                        'InvoiceLines',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
